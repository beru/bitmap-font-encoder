
指定したコードに紐付くのデータ位置の効率的な圧縮方法

開始コードと終了コード記録、その間のコード数、約8000

参照出来ないデッドコード区間が存在する。

Sequentialに最初から最後まで読んで展開するわけにはいかないので、Tree状に位置の記録を行う。

0
											4
										8
											12
									16
											20
										24
											28
								32
											36
										40
											44
									48
											52
										56
											60
							64
											68
										72
											76
									80
											84
										88
											92
								96
											100
										104
											108
									112
											116
										120
											124
						128
					256
						384
				512
			1024
				1536
		2048
				2570
			3072
				3584
	4096
				4608
			5120
				5632
		6144
				6656
			7168
				7680
8192


16384

構造解説

	二分木方式でデータ位置を記録していく場合に、データ位置の記録自体にスペースを食う。
	固定長の配列で記録するわけにはいかないので、子Node情報の記録は、子ノードの先頭で行う。

	ルートでは左側のノードが先頭の0で、右側のノードが末尾の値の位置になる。

	// ノード情報
	leftNodeOffset[0] = 110;		// 左側のノード位置
	rightNodeOffset[1] = 1350;		// 右側のノード位置
	
	左右のノード位置の記録に占めるビット数は、おのずとツリーの区間と隣接するノードの情報で制限されて決まるので、
	ノード情報のサイズ（実際にフォントデータまでのオフセット）は自動的に算出する。

最適化

	末端の手前では、ノード位置の記録単位はバイトではなくてニブルにした方が記録効率が良くなるかも。
	また、最初の方のノードでは1バイト単位ではなくもっと大きな単位で記録すれば良いかも？
	でもそもそも根元のノードは数が少ないから影響は小さいか。しかし小さい数にすればビット数を減らせる。

問題
	Tree内にデータを埋め込むと記録位置が変わってしまう。
	
	