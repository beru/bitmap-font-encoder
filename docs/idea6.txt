線幅の記録 maxLen を考慮にいれれば情報量を減らす事が出来る。

もし縦16ラインあるうちの1ラインしか横線を引くラインが存在しない場合、
そのライン中にmaxLenの横線を引く事になる。
という事は線の開始位置が 0〜横幅-1 から 0〜横幅-1-maxLen に小さくなる。

もし横幅とmaxLenの値が等しいなら、ラインを完全に塗りつぶしという事になる。
もし１ラインしか横線を引くラインが存在しない場合、その線に置くという事が
自動的に確定出来るので、その他の情報が要らない。

また、横線を引くラインが複数存在する場合でも、もしラインに至るまで
maxLenの記録が出てこなかったら、最後のラインで自動的に確定できる。
（いつかは出てくるという前提があるので確定情報に利用出来る、線を置ける位置等を限定できる）

一番長い線が端っこに置いてあるケースが多いので、ラインの並びの反転を出来るようにしたい。
（面で線が置かれているラインが1ラインしか無い場合は反転する意味が無いので出来なくする。）
ただ反転しないケースの場合に1bit無駄になってしまう。

---------------------------------

横か縦どちらかの面を先に処理して、線を引いた箇所を他の面から線を引く範囲から除外する。
座標範囲が減るので、記録の情報量を減らす事が出来る。

どちらの面から先に処理するかによって違いが出るかもしれないけれど、面中に線を引くラインが
1ラインしか存在しなくて、maxLen == 面幅でラインが全て塗りつぶしと決定出来る場合は先に問答無用で処理する。


-----------

Encoder : brute force で線の最大幅にリミットを設けてビット容量が一番小さくなったパターンを採用する。

------------

行が空行かどうかの記録の次に、空行じゃない行の最初の塗りつぶしの P1 を記録する。
最長記録がどこの行にくるか限定できる場合がある。

最長記録が最後に来る場合は、各行の最初の塗りつぶしのP1座標を記録しないほうが容量を減らせる。
（自動的に判断できるので）

-----------

横線を引いた後に、縦線を引く領域の長さが確定されるので、最長ラインの場所も特定しやすくなる。

-----------

横面の1Pixel記録を縦面に移動するかどうかの判定で、その1Pixelの右側や左側に横線が存在する場合は移動しないほうが良いかも。

-----------

データがある行の、行の左端からのデータ位置と、行の右端からのデータ位置を記録する方式はどうか？

	改行記録を消す事が出来る。
	
	最初に塗りつぶしの横幅記録
	次からは、塗りつぶしの横幅を最初に記録して、次にオフセットを記録する。
	
-----------

データの最長幅だけでなく最短幅も記録すれば、長い線ばっかりの記録の容量を削れる。

	1ドット記録は縦面に移してしまう。
	
---------------

横幅の半分以上の長さの塗りつぶしは1行に2つ以上並ばない。（改行を自動的にできる）

2,3,4,5 までは 2bitで表現出来るので、6以上の塗りつぶしを別処理。

---------

塗りつぶしがある行において、最初の塗りつぶしの左端からの距離を全て記録。

開始位置が8ドットを超えていない行の場合
	塗りつぶし長さが8ドットより超えているデータがある場合は、右端からの距離を記録。
	そうでないデータは、短いよビットと線の長さを記録。

開始位置が8度ドットを超えている塗りつぶしも、右端からの距離を記録。

------------

横面
	横幅が14と15のフォントに集中している。
	そのうち、線を引く開始位置の頻度は、左側部分が高く右側部分は低い。
	ただし最後の行はそうでもないので除外する。

縦面
	同じく、縦幅が横幅が14と15のフォントに集中している。
	線を引く開始位置の頻度は、上側部分が高く、下側部分は低い。
	ただし最上段と最下段はそうでもないので除外する。
	

  0 000
  1 001
  2 010
  3 0110
  4 0111
  5 1000
  6 1001
  7 1010
  8 1011
  9 1100
 10 1101
 11 1110
 12 11110
 13 11111
 
  0 000
  1 001
  2 010
  3 011
  4 1000
  5 1001
  6 1010
  7 1011
  8 1100
  9 1101
 10 1110
 11 11110
 12 11111


3000ビットぐらいは削れるけれど劇的ではない。。

-------------------------------------------

Canonical Huffman符号を使う。

---------------------------------------------

×殆どの漢字が16*16の領域の結構な部分を占めているのだから、
×空行情報だけで範囲を表現できるはず。
×開始位置や幅、高さを記録する必要は無い。

片面で空行であっても、他の面では記録されている場合があるので、範囲を表現できない。

-------------------------------

縦横開始位置と幅、高さを記録した場合。

横面で左端の行や右端の行に記録が無かった場合、縦面の記録で塗りつぶしが存在するのは確実なので、改行記録をその分省略できる。

--------------

塗りつぶしの左の位置を最初に記録するやり方を取る。

-- 最長幅の塗りつぶしの候補が複数ある場合は、画面の右端からの距離を記録する。

-- 横面の最初の塗りつぶしまでの最大距離を記録

最大線長の記録、データ有効行の一番初めの塗りつぶしの開始位置を記録すれば、範囲を狭められる。

---------------

encodeAlphaで記録している領域情報は、個別に記録するのではなくて、４つの組み合わせのパターンで記録した方がビット数を節約できそう。

------------------

斜め線の記録を行う。

indexで指定した線の端から、連続で斜め線が引ける方向を探す。

	斜め45度の線に限定する。

	延長していって既存の線にぶつかったら停止する。
	（ただし延長方式で引いた線との重なりでは停止しない）
	
	横線の場合、右端の右上か右下に限定。
	
	一番上の行の線を選択した場合、右上に線は引けないので、方向を右下に限定する。
	一番下の行の線を選択した場合、右下に線は引けないので、方向を右上に限定する。
	
もし縦線が2ドット以上の長さの線の場合、
	右上に線を引く場合は、縦線の上側の始点を線の開始位置とする。
	右下に線を引く場合は、縦線の下側の終点を線の開始位置とする。

	既に右下方向が埋まっていて、左下方向が空いている場合は、自動的にその方向に決定できる

1ドットの縦線が無いフォントは、斜め線が無い場合が多い。

縦線は下方向に斜め線を延長することが多い。
http://www.geocities.jp/shingyo_o/chishiki-11.htm
なので単独の点は、右上か右下に方向を限定し、2ドット以上の縦線は下方向に限定する。

縦線を指定して、縦線の下端が横線に入った場合は、その入った場所を始点にした方が良いかも。
1ドットの縦線の上下に横線が来た場合には、その1ドットの縦線は複数ドットの長さの縦線とみなす。

左下の縦線は左下に延長する事が多い。右上にも縦線があれば延長でなお更。

横方向の線は、手前の下行に長い横線がある場合は、その延長で右上に伸ばす場合が多い。


