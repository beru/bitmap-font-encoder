線幅の記録 maxLen を考慮にいれれば情報量を減らす事が出来る。

もし縦16ラインあるうちの1ラインしか横線を引くラインが存在しない場合、
そのライン中にmaxLenの横線を引く事になる。
という事は線の開始位置が 0〜横幅-1 から 0〜横幅-1-maxLen に小さくなる。

もし横幅とmaxLenの値が等しいなら、ラインを完全に塗りつぶしという事になる。
もし１ラインしか横線を引くラインが存在しない場合、その線に置くという事が
自動的に確定出来るので、その他の情報が要らない。

また、横線を引くラインが複数存在する場合でも、もしラインに至るまで
maxLenの記録が出てこなかったら、最後のラインで自動的に確定できる。
（いつかは出てくるという前提があるので確定情報に利用出来る、線を置ける位置等を限定できる）

一番長い線が端っこに置いてあるケースが多いので、ラインの並びの反転を出来るようにしたい。
（面で線が置かれているラインが1ラインしか無い場合は反転する意味が無いので出来なくする。）
ただ反転しないケースの場合に1bit無駄になってしまう。

---------------------------------

横か縦どちらかの面を先に処理して、線を引いた箇所を他の面から線を引く範囲から除外する。
座標範囲が減るので、記録の情報量を減らす事が出来る。

どちらの面から先に処理するかによって違いが出るかもしれないけれど、面中に線を引くラインが
1ラインしか存在しなくて、maxLen == 面幅でラインが全て塗りつぶしと決定出来る場合は先に問答無用で処理する。


-----------

Encoder : brute force で線の最大幅にリミットを設けてビット容量が一番小さくなったパターンを採用する。

------------

行が空行かどうかの記録の次に、空行じゃない行の最初の塗りつぶしの P1 を記録する。
最長記録がどこの行にくるか限定できる場合がある。

最長記録が最後に来る場合は、各行の最初の塗りつぶしのP1座標を記録しないほうが容量を減らせる。
（自動的に判断できるので）

-----------

横線を引いた後に、縦線を引く領域の長さが確定されるので、最長ラインの場所も特定しやすくなる。

-----------

横面の1Pixel記録を縦面に移動するかどうかの判定で、その1Pixelの右側や左側に横線が存在する場合は移動しないほうが良いかも。

-----------

データがある行の、行の左端からのデータ位置と、行の右端からのデータ位置を記録する方式はどうか？

	改行記録を消す事が出来る。
	
	最初に塗りつぶしの横幅記録
	次からは、塗りつぶしの横幅を最初に記録して、次にオフセットを記録する。
	
-----------

データの最長幅だけでなく最短幅も記録すれば、長い線ばっかりの記録の容量を削れる。

	1ドット記録は縦面に移してしまう。
	
	
	

