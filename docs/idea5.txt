
長い線を別の方式で定義する。

	横面と縦面に分けた後に、空白行かデータ行かのフラグを先に並べて、長い線の位置情報を削減できる様にする。
		
		空白行には長い線も存在しない前提。
		長い線の記録を置ける行は、短い線もあるかもしれない行のみ。
		
		× 長い線の次の行の横には長い線が来ない事が多い。
			そういう前提を使えば情報を削れるか？（予測符号になってしまう？）
		
		同じ行に長い線が2本以上入る事はあまり無い。なので自動的に改行してしまうのも手だけれど。。
		
			長い線が入る隙間がある場合は定義しても良い。

	5ドット以上の長い線を対象に、長い線だけの情報を符号化する。
		
		開始位置最大ビット数	: 1〜4, 2bit
								長い線なんだから16以降のidxを始点にする事は無いだろう。（20ドット以下のフォントの場合）
		線の長さ最大ビット数	: 1〜4, 2bit
								長い線なので、線終端位置から列の右端までの長さを記録する。
								
		長い線の情報
			列オフセット		: 0〜15, 1〜4bit
								長い線なのだから16以降のidxを始点にする事は無いだろう。（20ドット以下のフォントの場合）
								
			線の長さ			: 1〜4bit 0 〜 -15
								長い線なので、線終端位置から列の右端までの長さを記録する。
		
		空行 0
		データ行 1
			列オフセット
			線の長さ
	
	長い線で行の全部がうめつくされたとは言わないまでも、
	端から１ドットを残して線が引かれた場合は、短い線を同じ行には置けない。
	何故なら短い線を置いたら長い線と繋がってしまうから。
	
		-#############-
	
	長い線の左右１ドットを除いた領域を短い線情報群で定義する。
	
		オフセットや長さのビット数を減らせる。
	
	長い線で横線を引いて、5ドット以上の長い縦線を置ける領域がなくなってしまった場合、
	そこの縦方向の長い線の定義を省略する。
	
		############
		------------
		-----##-----
		--###-------
		------------
		############
		
		この処理を利用する場合、先に縦面の長い線を定義するのか、横面の長い線を定義するのか、
		フラグを記録して決められるようにした方が良い。
	
	
----#----#-----
----#----#-----
----##########-
---#--#-----#--
---#---#---#---
--#-###########
--#------------
-##---#######--
#-#---#-----#--
--#---#######--
--#---#-----#--
--#---#######--
--#--#-#-#---#-
--#--#-#--#---#
--#-#--#----#-#
--#-----#####--
num of bits : 299

---------------
---------------
----##########-
---------------
---------------
--#-###########
--#------------
--#---#######--
--#------------
--#---#######--
--#------------
--#---#######--
--#------------
--#------------
--#------------
--#-----#####--

--------------- 1
--------------- 1
--------------- 1
------#-----#-- 1+4+1 + 1+3+1 + 1
-------#---#--- 1+4+1 + 1+3+1 + 1
--------------- 1
--------------- 1
-#------------- 1+4+1 + 1
#-------------- 1+4+1 + 1
--------------- 1
--------------- 1
--------------- 1
---------#---#- 1+4+1 + 1+2+1
----------#---- 1+4+1 + 1
----#-------#-- 1+4+1 + 1+4+1 + 1
--------------- 1

-------------##- 1+4+2
---------------- 1
--------###----- 1+4+2 + 1
---------------- 1
---------------- 1
##-------------- 1+4+2 + 1
---------------- 1
------------###- 1+4+2
--------###----- 1+4+2 + 1
------------##-- 1+4+2 + 1
##-------------- 1+4+2 + 1
---##----------- 1+4+2 + 1
---------------- 1
---------------- 1
---------------- 1

146




---#------#----
---#-----#-----
---#-#-######--
###--#-#----#--
--#-#--######--
---#---#----#--
---##--#----#--
--#--#-######--
#####-#---#----
---#------#--#-
-#-##-#######--
-#-#-#--#-##---
-#-#-#--#-#-#--
-#-#-#-#--#--#-
#--#--#---#---#
---#-----##----

---------------
---------------
-------#----#--
-------#----#--
-------#----#--
-------#----#--
-------#----#--
-------#----#--
#####-----#----
---#------#----
---#--#######--
---#------#----
---#------#----
---#------#----
---#------#----
---#------#----

----------#---- 1+4+2 + 1
---------#----- 1+4+2 + 1
--------####--- 1+4+2 + 1
###------------ 1+4+2 + 1
--#-#---####--- 1+4+2 + 1+4+2 + 1+4+2 + 1
--------------- 1
----#---------- 1+4+2 + 1
--#--#--####--- 1+4+2 + 1+4+2 + 1+4+2 + 1
------#-------- 1+4+2 + 1
-------------#- 1+4+1
----#---------- 1+4+2 + 1
-----------#--- 1+4+2 + 1
------------#-- 1+4+2 + 1
-------#-----#- 1+4+2 + 1+3+1
#-----#-------# 1+4+2 + 1+4+2 + 1+3
---------#----- 1+4+2 + 1

---------------- 1
---------------- 1
---------------- 1
---------------- 1
---------------- 1
---------------- 1
-----------##--- 1+4+2 + 1
---------------- 1
---------------- 1
--##-------###-- 1+4+2 + 1+4+2 + 1
------#--------- 1+4+2 + 1
###------------- 1+4+2 + 1
---------------- 1
----------####-- 1+4+2 + 1
---------------- 1

218

----#----#-#---
----#----#--#--
---#-#########-
--##-----#-----
-#-#-----#-----
#--#------#--#-
---#-------#-#-
---#---#----##-
-------#-----#-
###############
-----#-#---#---
----#---#--#---
--###----##----
##--#--#--#----
----###----##--
-###---------##
num of bits : 266


---#----------
---#----######
---#-#--#----#
###--#--#----#
--#-#---######
---#----------
---#-#--######
--#--#--#----#
#######-#----#
---#--#-######
-#-##---#----#
-#-#-#--#----#
-#-#-#--######
-#-#--#-#----#
#--#----#----#
---#----#---##
num of bits : 248

--------------
--------######
--------------
--------------
--------######
--------------
--------#----#
--------#----#
#######-#----#
---#----#----#
---#----#----#
---#----#----#
---#----#----#
---#----#----#
---#----#----#
---#----#----#

--------------
--------------
--------------
###-----------
--#-----------
--------------
---------####-
--#-----------
--------------
------#--####-
--------------
--------------
---------####-
--------------
--------------
--------------

---#----------
---#----------
---#-#--#----#
-----#--#----#
----#---------
---#----------
---#-#--------
--#--#--------
--------------
------#-------
-#--#---------
-#---#--------
-#---#--------
-#----#-------
#-------------
------------#-

----#--#-#-----
-#--#--#-#-----
--#-#-#--#-----
--#-#-#--######
########-#--#--
---###--#---#--
--#-#-##-#--#--
-#--#--#-#--#--
#---#-----#-#--
########--##---
---#--#----#---
--#---#---##---
-#####----#-#--
----##---#--#--
--##--#-#----#-
##-----#------#
num of bits : 328

---#------#---
---#-----#----
---#-#--#####-
###--#--#---#-
--#-#---#####-
---#----#---#-
---##---#---#-
--#--#--#####-
#####-#---#---
---#---#######
-#-##--#--#--#
-#-#-#-#--#--#
-#-#-#-#--#--#
-#-#-#-#--###-
#--#------#---
---#------#---
num of bits : 258

----------------------------------------------------

ビットマップデータの横幅や縦幅が極端に小さい場合は、問答無用でビットの配列をそのまま記録した方が良い。

例えば

	4 * 4 の場合、
		塗りつぶし長さビット 1*2bit
		改行				 4*2bit
		だけで、10ビット消費
		
	5 * 5 の場合
		塗りつぶし長さビット 2*2bit
		改行				 5*2bit
		だけで、14ビット消費
	
	6 * 6 の場合
		塗りつぶし長さビット 2*2bit
		改行				 6*2bit
		だけで、16ビット消費
	
	8 * 8 の場合
		塗りつぶし長さビット 2*2bit
		改行				 8*2bit
		だけで、20ビット消費
	
-------------

その行か改行だけかどうかの記録を先に行ってしまい、後続のデータで改行だけじゃない情報の記録を行うようにしたほうが良い。
すべて改行だけの場合に、線の長さのビット長定義記録を省略できる。（ 2bit ）
ある面がすべて改行という文字は少ないけれど。（二とか|とか）

-------------

片方の面で塗り潰された領域は、他方の面ではそこを考慮しないで良い。

#####
####-
###--
##---
##---
#----
#----
#----
#----
#----
#----
##---
##---
###--
####-
#####

この場合、先に横方向の記録を行う場合、
縦の塗りつぶしで残る記録は、一番左のラインのみだが、そのラインは長さが16ではなく、
idx5〜idx10の範囲までしか考慮する必要が無い。

また、縦方向を先に処理してしまえば、横方向の左端の列が省略出来るので、横方向の記録の情報量を減らせる。

	---------------- 0
	---------------- 0
	###----------### 1+4+4 + 1+4+2
	#####------##### 1+4+4 + 1+4+3
	################ 1+4+4

	##  1+1+1
	#-  1+1+1
	--  0
	---  0
	---  0
	---- 0
	---- 0
	---- 0
	---- 0
	---- 0
	---- 0
	---  0
	---  0
	--  0
	#-  1+1+1
	##  1+1+1
	
	54

--------------

-#
#-

や、

#-
-#

というパターンが斜め線がある文字でよく出てくる。

----------------

行でデータ定義したら必ず問答問答無用で改行させるという手もある。（同じ行の中に他の線が無い文字の場合は）
